EP3 - MAC0352
Autores: 
- Washington Luiz Meireles de Lima - 10737157
- Ygor Tavela Alves - 10687642


# Makefile comandos
  - make install: instala as dependêncuas do arquivo requirements.txt
  - make clean: apaga caches do python


# EXECUTANDO OS PROGRAMAS
execute na pasta raiz do projeto:

cd server/ && python3 server.py [-h] [-ip IP_ADDRESS] [-p PORT] [-tlsp TLS_PORT]
cd client/ && python3 client.py [-h] [-ip SERVER_IP_ADDRESS] [-p PORT] [-tlsp TLS_PORT] -lp P2P_LISTEN_PORT 
(argumentos entre [] são opcionais)

Exemplos:

cd server/ && python3 server.py
cd client/ && python3 client.py -lp 9000
Irá executar um servidor no ip local, escutando nas portas 8080 e 8081 (TLS).
Além de um cliente que envia conexões para o ip local nas portas 8080 e 8081 (TLS) e, escuta conexões P2P na porta 9000.

Obs. 1: Deve-se executar os arquivos server.py e client.py nos seus respectivos diretórios, pois há imports relativos nas suas depedências, assim caso seja executado python3 server/server.py por exemplo, pode haver erros de importação.


# ARQUIVOS
Na raiz deste projeto encontram-se um Makefile com alguns comandos de instalação de dependências (requirements.txt) e limpeza de cache,
um arquivo slides.pdf contendo uma breve apresentação do EP3, um diretório testes/ contendo os gráficos de performance dos testes realizados e, por fim, os diretórios  client/ e server/.
O diretório client/ se organiza da seguinte maneira:
    - src/server_ssl/server.crt: certificado tls do server
    - src/state/user: classe para controlar os estados de uma máquina de estados que representa um cliente
    - src/connection.py: classes e funções auxiliares para lidar com conexões entre servidor e outros clientes (p2p)
    - src/game.py: classe para controlar e sincronizar o jogo
    - src/input_read.py: classe para controlar o input que recebe comandos
    - client.py: classe responsável por administrar os comandos, conexões, jogo, estado, requests, etc...

O diretório server/ se organiza da seguinte maneira:
    - src/server_ssl/server.crt: certificado tls do server
    - src/server_ssl/server.key: chave do servidor utilizada para criptografar as conexões tls
    - src/domain/user.py: classe que representa a entidade usuário
    - src/auth.py: funções auxiliares para lidar com senha
    - src/connection.py: classes e funções auxiliares para lidar com conexões entre clientes
    - src/db.py: classe para fazer operações no banco de dados
    - src/migration.sql: comandos sql usado gerar as tabelas do banco de dados
    - src/tictactoe.db: banco de dados utilizado pelo servidor (criado depois da primeira execução do servidor)
    - server.py: classe responsável por administrar as conexões, requests, clientes, etc...


# DEPENDÊNCIAS
- python 3.9.5
- requirements.txt


# FEATURES NÃO IMPLEMENTADAS
Por diversos motivos, como por exemplo, a falta de tempo, algumas features exigidas no enunciado do EP não foram implementadas, dentre elas podemos citar:
- falhas do servidor
- verificação de latência entre clientes
- comando delay dos clientes
- tentativa de envio do resultado caso o servidor tenha caído no meio da partida
